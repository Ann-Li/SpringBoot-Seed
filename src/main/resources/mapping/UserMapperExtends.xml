<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.coder.springbootdomecollection.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="com.coder.springbootdomecollection.model.User">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="user_name" jdbcType="VARCHAR" property="userName" />
        <result column="password" jdbcType="VARCHAR" property="password" />
        <result column="phone" jdbcType="VARCHAR" property="phone" />
    </resultMap>
    <sql id="Base_Column_List">
      id, user_name, password, phone
    </sql>
    <sql id="DDL_Column_List">
      user_name, password, phone
    </sql>
    <!--
        id="selectPerson" 在命名空间中唯一的标识符，可以被用来引用这条语句。
        parameterType="int" 将会传入这条语句的参数类的完全限定名或别名。这个属性是可选的，因为 MyBatis 可以通过 TypeHandler 推断出具体传入语句的参数，默认值为 unset。
        parameterMap="deprecated"  作废
        resultType="hashmap" 从这条语句中返回的期望类型的类的完全限定名或别名。注意如果是集合情形，那应该是集合可以包含的类型，而不能是集合本身。使用 resultType 或 resultMap，但不能同时使用。
        resultMap="BaseResultMap" 外部 resultMap 的命名引用。结果集的映射是 MyBatis 最强大的特性，对其有一个很好的理解的话，许多复杂映射的情形都能迎刃而解。使用 resultMap 或 resultType，但不能同时使用。
        flushCache="false" 将其设置为 true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：false。
        useCache="true" 将其设置为 true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true。
        timeout="10000" 这个设置是在抛出异常之前，驱动程序等待数据库返回请求结果的秒数。默认值为 unset（依赖驱动）。
        fetchSize="256" 这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为 unset（依赖驱动）。
        statementType="PREPARED"  STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED。
        resultSetType="FORWARD_ONLY"  FORWARD_ONLY，SCROLL_SENSITIVE 或 SCROLL_INSENSITIVE 中的一个，默认值为 unset （依赖驱动）。
    -->
    <select id="list" resultMap="BaseResultMap">
        select
          <include refid="Base_Column_List" />
        from user
    </select>

    <insert id="add" useGeneratedKeys="true" keyProperty="id" parameterType="com.coder.springbootdomecollection.model.User" >
    insert into user
      (<include refid="DDL_Column_List" />)
    values
      (#{userName},#{password},#{phone});
    </insert>

    <update id="update" parameterType="com.coder.springbootdomecollection.model.User">
    update user set
    user_name = #{userName},
    password = #{password},
    phone = #{phone}
    where id = #{id}
    </update>

    <select id="selectUserById" parameterType="int" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user
        where
        id = #{id};
    </select>

    <delete id="delete" parameterType="int">
        delete from user where id = #{id};
    </delete>
</mapper>